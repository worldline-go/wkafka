// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: wkafka/wkafka.proto

package wkafka

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WkafkaService_Skip_FullMethodName = "/wkafka.WkafkaService/Skip"
)

// WkafkaServiceClient is the client API for WkafkaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WkafkaServiceClient interface {
	Skip(ctx context.Context, in *CreateSkipRequest, opts ...grpc.CallOption) (*Response, error)
}

type wkafkaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWkafkaServiceClient(cc grpc.ClientConnInterface) WkafkaServiceClient {
	return &wkafkaServiceClient{cc}
}

func (c *wkafkaServiceClient) Skip(ctx context.Context, in *CreateSkipRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, WkafkaService_Skip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WkafkaServiceServer is the server API for WkafkaService service.
// All implementations must embed UnimplementedWkafkaServiceServer
// for forward compatibility
type WkafkaServiceServer interface {
	Skip(context.Context, *CreateSkipRequest) (*Response, error)
	mustEmbedUnimplementedWkafkaServiceServer()
}

// UnimplementedWkafkaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWkafkaServiceServer struct {
}

func (UnimplementedWkafkaServiceServer) Skip(context.Context, *CreateSkipRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Skip not implemented")
}
func (UnimplementedWkafkaServiceServer) mustEmbedUnimplementedWkafkaServiceServer() {}

// UnsafeWkafkaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WkafkaServiceServer will
// result in compilation errors.
type UnsafeWkafkaServiceServer interface {
	mustEmbedUnimplementedWkafkaServiceServer()
}

func RegisterWkafkaServiceServer(s grpc.ServiceRegistrar, srv WkafkaServiceServer) {
	s.RegisterService(&WkafkaService_ServiceDesc, srv)
}

func _WkafkaService_Skip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkafkaServiceServer).Skip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WkafkaService_Skip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkafkaServiceServer).Skip(ctx, req.(*CreateSkipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WkafkaService_ServiceDesc is the grpc.ServiceDesc for WkafkaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WkafkaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wkafka.WkafkaService",
	HandlerType: (*WkafkaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Skip",
			Handler:    _WkafkaService_Skip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wkafka/wkafka.proto",
}
